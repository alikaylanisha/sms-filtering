{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":21146,"sourceType":"datasetVersion","datasetId":16021},{"sourceId":8493939,"sourceType":"datasetVersion","datasetId":5067998}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/nlp-banjingan-e3c4cd74-19ea-4c77-9c7a-353f24e8a60f.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240523/auto/storage/goog4_request&X-Goog-Date=20240523T112825Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=0536ea85fc7fac6c3f8370ab3baf634cd8a94478ae8d408096a4bcf5b52b93a2e0efe283cc29505009e03afff3279aa431cc7ee475b97f5ec041f5d68ee9560bccd2d784a70143da54a5febb3a473fba5f9038d0344f9ba37808064af4a842d61665d01902a62c47eee6d4485dd631b203ce868b2df9018b67916b85ff3c62d5b9696fd7bb629ba57caaa9e45c4a313443e1508edb1f11cd7012182ceb49c568573718aa439f454dce90874fec50237e3b65043e8e9b0e7c9c3df00b04c9b2b88aab1cf21d4110b9075852a64ad1d380e05a5f105c7d8d488333853cfbb4f4db3fa8e7d476173e07ca648dab5918a2f7040f2c1165b4ac16137ab8da05f295ba","timestamp":1716463713797}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'glovetwitter27b100dtxt:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F16021%2F21146%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240523%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240523T112825Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D698f0d3ee22107530bac5fa290be14d4f874d920702200bb7a5888ae2c56bfbc83d02941ea0dc6c46cab87ca0d05624087a089ea61618f30e8c41df0d864fb05aa4da767511519ef55e5b90f787feecfefd91c45ca330143babcda6d5cbaa608d5efb401865cfea7f4a7fe3c062a4f04a3d9e115ffa20f2e282959863a36d2e71d18481194d78b6703ff7a7b53693d947bed09b3dcc65d6d30083a4d9512821a0dc6e942bf335894c8732e1f261dae18d27dcdb8871812010267b9383c4a8a2ebb4bf62ccd94d40b3f9a3e69dcd832e383fe2a597e943bd0510742ba7b8271c32a6220c0b1e945a8b8993157de98c415ec2116a07a0cecf10878036cc77b3010,indo-spam-thingy:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5067998%2F8493939%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240523%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240523T112825Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D915edf3f3d8c15716a1e9ccab6faaeb7dc0b74a38047357f25632eb8a656c2515bc4b2aa8ba008003c0f8d65e5ac52f6fca06198eb3e0816acdddc49415c5abd82b1c1c02d5d542c7b02959067e90502747632675bb4e0f8d43a619e863fbfc542ce9259c753d400161fffbe9e73a4f3029381196070602e7d15d5995e7747970fe7484a805dbb4d415b4152cbae769cba8d9cce772ecc954b9d79adbe2432d0cba03306afa5cc412c52e381faa086c81049fba9c440d318513dfc3b0fcae093db2398f711a60abad21bb816649c7f6a4fc911392e31b43829a860753492f55a0ac8035f9a55b9e3f5494221e856295a7b12020736ac7293b5bd04d977cf9a31'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"c--Qb19LNa8t"},"cell_type":"code","outputs":[],"execution_count":null},{"cell_type":"code","source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.662543Z","iopub.execute_input":"2024-05-23T09:03:42.662889Z","iopub.status.idle":"2024-05-23T09:03:42.67392Z","shell.execute_reply.started":"2024-05-23T09:03:42.662862Z","shell.execute_reply":"2024-05-23T09:03:42.672954Z"},"trusted":true,"id":"fXNPPxR4Na8u","outputId":"fb542555-c724-41ac-d930-1f3cc3750dc7"},"execution_count":null,"outputs":[{"name":"stdout","text":"/kaggle/input/indo-spam-thingy/df_preprocess.csv\n/kaggle/input/glovetwitter27b100dtxt/glove.twitter.27B.100d.txt\n","output_type":"stream"}]},{"cell_type":"markdown","source":["# Import Libraries"],"metadata":{"id":"r3l9SL-_Na8u"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import nltk\n","nltk.download('stopwords')\n","\n","from sklearn.preprocessing import LabelBinarizer\n","from nltk.corpus import stopwords\n","from nltk.stem.porter import PorterStemmer\n","from wordcloud import WordCloud,STOPWORDS\n","from nltk.stem import WordNetLemmatizer\n","from nltk.tokenize import word_tokenize,sent_tokenize\n","from bs4 import BeautifulSoup\n","import re,string,unicodedata\n","from keras.preprocessing import text, sequence\n","from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n","from sklearn.model_selection import train_test_split\n","from string import punctuation\n","from nltk import pos_tag\n","from nltk.corpus import wordnet\n","import keras\n","from keras.models import Sequential\n","from keras.layers import Dense,Embedding,LSTM,Dropout\n","from keras.callbacks import ReduceLROnPlateau\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","import tensorflow as tf"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.675932Z","iopub.execute_input":"2024-05-23T09:03:42.676298Z","iopub.status.idle":"2024-05-23T09:03:42.686437Z","shell.execute_reply.started":"2024-05-23T09:03:42.676264Z","shell.execute_reply":"2024-05-23T09:03:42.685499Z"},"trusted":true,"id":"3f3_3JZ2Na8v","outputId":"21d5f97a-7893-48df-a268-58aa667d30b3"},"execution_count":null,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"markdown","source":["# Read Data"],"metadata":{"id":"uacGdF7UNa8v"}},{"cell_type":"code","source":["DATA_SET = pd.read_csv(\"/kaggle/input/indo-spam-thingy/df_preprocess.csv\")\n","DATA_SET.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.68738Z","iopub.execute_input":"2024-05-23T09:03:42.687675Z","iopub.status.idle":"2024-05-23T09:03:42.707785Z","shell.execute_reply.started":"2024-05-23T09:03:42.687651Z","shell.execute_reply":"2024-05-23T09:03:42.706904Z"},"trusted":true,"id":"xdXM6kUdNa8w","outputId":"c2138964-9bdb-40d3-b2fa-6c9bb3df441b"},"execution_count":null,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"   label                                             no_url\n0      2  promo beli paket flash mulai 1gb telkomsel app...\n1      2  2 5 gb 30 hari hanya rupiah 35 ribu spesial bu...\n2      2  2016 07 08 11 47 11 pulang terhormat sisa kuot...\n3      2  2016 08 07 11 29 47 pulang terhormat sisa kuot...\n4      2  4 5gb 30 hari hanya rupiah 55 ribu spesial bua...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>no_url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>promo beli paket flash mulai 1gb telkomsel app...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2 5 gb 30 hari hanya rupiah 35 ribu spesial bu...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2016 07 08 11 47 11 pulang terhormat sisa kuot...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2016 08 07 11 29 47 pulang terhormat sisa kuot...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>4 5gb 30 hari hanya rupiah 55 ribu spesial bua...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":["# Show data info"],"metadata":{"id":"f7QWRP5gNa8w"}},{"cell_type":"code","source":["DATA_SET.info()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.709636Z","iopub.execute_input":"2024-05-23T09:03:42.709904Z","iopub.status.idle":"2024-05-23T09:03:42.720347Z","shell.execute_reply.started":"2024-05-23T09:03:42.70988Z","shell.execute_reply":"2024-05-23T09:03:42.719358Z"},"trusted":true,"id":"L3dDMbvcNa8w","outputId":"3c146fe0-0c30-4405-c93b-b713208fc690"},"execution_count":null,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1143 entries, 0 to 1142\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   label   1143 non-null   int64 \n 1   no_url  1143 non-null   object\ndtypes: int64(1), object(1)\nmemory usage: 18.0+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":["# Ploting"],"metadata":{"id":"Vnf0TGkwNa8w"}},{"cell_type":"code","source":["# Assuming the label counts are stored in the 'label_counts' variable\n","label_counts = DATA_SET['label'].value_counts()\n","\n","# Mapping numerical labels to their corresponding text labels\n","label_mapping = {0: 'Normal', 1: 'Fraud', 2: 'Promotional'}\n","label_names = [label_mapping[label] for label in label_counts.index]\n","\n","# Define RGB colors (normalized to the range [0, 1])\n","color_directory = {\n","    'Normal': (233/255, 209/255, 238/255),       # Light pink \t233\t209\t238\n","    'Fraud': (255/255, 192/255, 203/255),        # Pink\n","    'Promotional': (186/255, 225/255, 255/255)   # Light blue\n","}\n","colors = [color_directory[label] for label in label_names]\n","\n","# Creating a bar graph\n","plt.bar(label_names, label_counts, color=colors)\n","plt.xlabel('SMS Categories')\n","plt.ylabel('Count')\n","plt.title('Distribution of Normal, Fraud and Promotional SMS Labels')\n","\n","# Display the count on top of each bar\n","for i, count in enumerate(label_counts):\n","    plt.text(i, count + 0.05, str(count), ha='center', va='bottom')\n","\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.721449Z","iopub.execute_input":"2024-05-23T09:03:42.721788Z","iopub.status.idle":"2024-05-23T09:03:42.973137Z","shell.execute_reply.started":"2024-05-23T09:03:42.721753Z","shell.execute_reply":"2024-05-23T09:03:42.972107Z"},"trusted":true,"id":"Ehz-uCvjNa8w","outputId":"40781f59-f363-4912-e24e-aab15a1884a6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":["DATA_SET.isna().sum() # Checking for nan Values\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.974682Z","iopub.execute_input":"2024-05-23T09:03:42.97509Z","iopub.status.idle":"2024-05-23T09:03:42.983352Z","shell.execute_reply.started":"2024-05-23T09:03:42.975052Z","shell.execute_reply":"2024-05-23T09:03:42.982345Z"},"trusted":true,"id":"dRGmhojiNa8w","outputId":"7b801f33-5e17-42ad-9c1c-7c0f185faafa"},"execution_count":null,"outputs":[{"execution_count":101,"output_type":"execute_result","data":{"text/plain":"label     0\nno_url    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":["# Evaluate data Distribution"],"metadata":{"id":"qodnuGr9Na8w"}},{"cell_type":"code","source":["DATA_SET.label.value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.984734Z","iopub.execute_input":"2024-05-23T09:03:42.985086Z","iopub.status.idle":"2024-05-23T09:03:42.99533Z","shell.execute_reply.started":"2024-05-23T09:03:42.985053Z","shell.execute_reply":"2024-05-23T09:03:42.994507Z"},"trusted":true,"id":"cd4qNNUINa8w","outputId":"c59c35f1-5bdb-4aed-eccf-a8394f28f630"},"execution_count":null,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"label\n0    569\n1    335\n2    239\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":["df = DATA_SET.copy()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:42.996333Z","iopub.execute_input":"2024-05-23T09:03:42.996616Z","iopub.status.idle":"2024-05-23T09:03:43.005802Z","shell.execute_reply.started":"2024-05-23T09:03:42.996591Z","shell.execute_reply":"2024-05-23T09:03:43.00496Z"},"trusted":true,"id":"kYZ1VaCtNa8x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["stop = set(stopwords.words('indonesian'))\n","punctuation = list(string.punctuation)\n","stop.update(punctuation)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:43.008947Z","iopub.execute_input":"2024-05-23T09:03:43.009241Z","iopub.status.idle":"2024-05-23T09:03:43.017336Z","shell.execute_reply.started":"2024-05-23T09:03:43.009213Z","shell.execute_reply":"2024-05-23T09:03:43.016501Z"},"trusted":true,"id":"3KoP1_mJNa8x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# CLEANING DATA"],"metadata":{"id":"dGDwBFVMNa8x"}},{"cell_type":"markdown","source":["## Splitting the data into 2 parts - training and testing data"],"metadata":{"id":"2GJQZ7ZGNa8x"}},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"kflQSJ4YNa8x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing import text, sequence\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","\n","# Assuming you have defined df already\n","x_train, x_test, y_train, y_test = train_test_split(df['no_url'], df['label'], random_state=0)\n","\n","# Maximum number of words to keep, based on word frequency\n","max_features = 3723\n","# Maximum length of text sequences\n","maxlen = 300\n","\n","# Tokenize text\n","tokenizer = text.Tokenizer(num_words=max_features)\n","tokenizer.fit_on_texts(x_train)\n","\n","# Tokenize and pad sequences for train set\n","tokenized_train = tokenizer.texts_to_sequences(x_train)\n","x_train = sequence.pad_sequences(tokenized_train, maxlen=maxlen)\n","\n","# Tokenize and pad sequences for test set\n","tokenized_test = tokenizer.texts_to_sequences(x_test)\n","x_test = sequence.pad_sequences(tokenized_test, maxlen=maxlen)\n","\n","# Print the shapes and first sample of x_train and x_test\n","print(f\"x_train shape: {x_train.shape}\")\n","print(f\"x_train[0]: {x_train[0]}\")\n","print(f\"x_test shape: {x_test.shape}\")\n","print(f\"x_test[0]: {x_test[0]}\")\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T10:36:19.362775Z","iopub.execute_input":"2024-05-23T10:36:19.363161Z","iopub.status.idle":"2024-05-23T10:36:19.435969Z","shell.execute_reply.started":"2024-05-23T10:36:19.363131Z","shell.execute_reply":"2024-05-23T10:36:19.434794Z"},"trusted":true,"id":"53TwDXm-Na8x","outputId":"36d05dbd-bce2-4665-b156-d5053e12ebce"},"execution_count":null,"outputs":[{"name":"stdout","text":"x_train shape: (857, 300)\nx_train[0]: [   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n 1448   44   18 1449 1450  591]\nx_test shape: (286, 300)\nx_test[0]: [   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n    0    0    0    0    0    0    0    0    0    0    0    0    0 1219\n  112   10  479  474  463  656]\n","output_type":"stream"}]},{"cell_type":"markdown","source":["# Naive Bayes"],"metadata":{"id":"89KOGgX-j7NH"}},{"cell_type":"code","source":["EMBEDDING_FILE = '../input/glovetwitter27b100dtxt/glove.twitter.27B.100d.txt'"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:43.086819Z","iopub.execute_input":"2024-05-23T09:03:43.087114Z","iopub.status.idle":"2024-05-23T09:03:43.091328Z","shell.execute_reply.started":"2024-05-23T09:03:43.087087Z","shell.execute_reply":"2024-05-23T09:03:43.090358Z"},"trusted":true,"id":"XInnfYx9Na84"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_coefs(word, *arr):\n","    return word, np.asarray(arr, dtype='float32')\n","embeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE))"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:03:43.092497Z","iopub.execute_input":"2024-05-23T09:03:43.092801Z","iopub.status.idle":"2024-05-23T09:04:20.167413Z","shell.execute_reply.started":"2024-05-23T09:03:43.092776Z","shell.execute_reply":"2024-05-23T09:04:20.166511Z"},"trusted":true,"id":"VdnHjqnsNa84"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["all_embs = np.stack(embeddings_index.values())\n","emb_mean,emb_std = all_embs.mean(), all_embs.std()\n","embed_size = all_embs.shape[1]\n","\n","word_index = tokenizer.word_index\n","nb_words = min(max_features, len(word_index))\n","#change below line if computing normal stats is too slow\n","embedding_matrix = embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\n","for word, i in word_index.items():\n","    if i >= max_features: continue\n","    embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None: embedding_matrix[i] = embedding_vector"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:04:20.169274Z","iopub.execute_input":"2024-05-23T09:04:20.170072Z","iopub.status.idle":"2024-05-23T09:04:22.023343Z","shell.execute_reply.started":"2024-05-23T09:04:20.170031Z","shell.execute_reply":"2024-05-23T09:04:22.022508Z"},"trusted":true,"id":"grbVlgqINa84","outputId":"46f668d1-ff2d-4fa6-9052-114ff2c0c86d"},"execution_count":null,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/IPython/core/interactiveshell.py:3448: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n  if await self.run_code(code, result, async_=asy):\n","output_type":"stream"}]},{"cell_type":"code","source":["x=df['no_url']\n","y=df['label']\n","x_train,x_test, y_train, y_test = train_test_split(x, y, test_size=0.20,random_state=32)"],"metadata":{"id":"eRVQztH_Na84"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import ComplementNB\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","from nltk.tokenize import word_tokenize\n","import matplotlib.pyplot as plt\n","import nltk\n","\n","\n","# Assuming `x` is your text data and `y` are the labels\n","\n","\n","# Split the dataset into training and testing sets\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=32)\n","\n","# Load GloVe embeddings\n","def load_glove_embeddings(glove_file_path):\n","    embeddings_index = {}\n","    with open(glove_file_path, encoding='utf-8') as f:\n","        for line in f:\n","            values = line.split()\n","            word = values[0]\n","            coefs = np.asarray(values[1:], dtype='float32')\n","            embeddings_index[word] = coefs\n","    return embeddings_index\n","\n","# Preprocess GloVe embeddings to replace negative values with zero\n","def preprocess_glove_embeddings(embeddings_index):\n","    for word, vec in embeddings_index.items():\n","        embeddings_index[word] = np.where(vec < 0, 0, vec)\n","    return embeddings_index\n","\n","# Convert text to GloVe embeddings\n","def text_to_glove(text, embeddings_index, embedding_dim=100):\n","    words = word_tokenize(text)\n","    word_vectors = [embeddings_index[word] for word in words if word in embeddings_index]\n","    if len(word_vectors) == 0:\n","        return np.zeros(embedding_dim)\n","    return np.mean(word_vectors, axis=0)\n","\n","# Load GloVe embeddings\n","glove_file_path = '../input/glovetwitter27b100dtxt/glove.twitter.27B.100d.txt'\n","embeddings_index = load_glove_embeddings(glove_file_path)\n","\n","# Preprocess GloVe embeddings\n","embeddings_index = preprocess_glove_embeddings(embeddings_index)\n","\n","# Convert text data to GloVe embeddings\n","embedding_dim = 100  # This should match the dimension of your GloVe vectors\n","x_train_glove = np.array([text_to_glove(text, embeddings_index, embedding_dim) for text in x_train])\n","x_test_glove = np.array([text_to_glove(text, embeddings_index, embedding_dim) for text in x_test])\n","\n","# Initialize the Complement Naive Bayes model\n","CNB = ComplementNB()\n","\n","# Lists to store training and testing accuracy\n","train_accuracy = []\n","test_accuracy = []\n","\n","# Fit the model and compute accuracy for each iteration\n","for i in range(1, len(x_train) + 1):\n","    CNB.fit(x_train_glove[:i], y_train[:i])\n","    train_pred = CNB.predict(x_train_glove[:i])\n","    test_pred = CNB.predict(x_test_glove)\n","    train_accuracy.append(accuracy_score(y_train[:i], train_pred))\n","    test_accuracy.append(accuracy_score(y_test, test_pred))\n","\n","# Plotting the results\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(x_train) + 1), train_accuracy, label='Training Accuracy', marker='o')\n","plt.plot(range(1, len(x_train) + 1), test_accuracy, label='Testing Accuracy', marker='o')\n","plt.title('Training and Testing Accuracy of Complement Naive Bayes Model')\n","plt.xlabel('Number of Training Instances')\n","plt.ylabel('Accuracy')\n","plt.xticks(range(1, len(x_train) + 1))\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T10:54:40.080225Z","iopub.execute_input":"2024-05-23T10:54:40.080557Z","iopub.status.idle":"2024-05-23T10:55:24.15035Z","shell.execute_reply.started":"2024-05-23T10:54:40.08053Z","shell.execute_reply":"2024-05-23T10:55:24.149408Z"},"trusted":true,"id":"ZfVzXRt2Na84","outputId":"6f11d311-d35b-46cd-9324-db340dc1fab9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":["# ANALYSIS AFTER TRAINING OF MODEL - Naive Bayes"],"metadata":{"id":"8P1YlLU2j1cD"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import ComplementNB\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","import re\n","import nltk\n","nltk.download('punkt')\n","from nltk.tokenize import word_tokenize\n","\n","# Load GloVe embeddings\n","def load_glove_embeddings(glove_file_path):\n","    embeddings_index = {}\n","    with open(glove_file_path, encoding='utf-8') as f:\n","        for line in f:\n","            values = line.split()\n","            word = values[0]\n","            coefs = np.asarray(values[1:], dtype='float32')\n","            embeddings_index[word] = coefs\n","    return embeddings_index\n","\n","# Preprocess GloVe embeddings to replace negative values with zero\n","def preprocess_glove_embeddings(embeddings_index):\n","    for word, vec in embeddings_index.items():\n","        embeddings_index[word] = np.where(vec < 0, 0, vec)\n","    return embeddings_index\n","\n","# Convert text to GloVe embeddings\n","def text_to_glove(text, embeddings_index, embedding_dim=100):\n","    words = word_tokenize(text)\n","    word_vectors = [embeddings_index[word] for word in words if word in embeddings_index]\n","    if len(word_vectors) == 0:\n","        return np.zeros(embedding_dim)\n","    return np.mean(word_vectors, axis=0)\n","\n","# Split the dataset into training and testing sets\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=32)\n","\n","# Load GloVe embeddings\n","glove_file_path = '../input/glovetwitter27b100dtxt/glove.twitter.27B.100d.txt'\n","embeddings_index = load_glove_embeddings(glove_file_path)\n","\n","# Preprocess GloVe embeddings\n","embeddings_index = preprocess_glove_embeddings(embeddings_index)\n","\n","# Convert text data to GloVe embeddings\n","embedding_dim = 100  # This should match the dimension of your GloVe vectors\n","x_train_glove = np.array([text_to_glove(text, embeddings_index, embedding_dim) for text in x_train])\n","x_test_glove = np.array([text_to_glove(text, embeddings_index, embedding_dim) for text in x_test])\n","\n","# Initialize the Complement Naive Bayes model\n","CNB = ComplementNB()\n","\n","# Fit the model\n","CNB.fit(x_train_glove, y_train)\n","\n","# Predict the labels for the test set\n","predicted = CNB.predict(x_test_glove)\n","\n","# Calculate the accuracy\n","accuracy = accuracy_score(y_test, predicted)\n","print('ComplementNB model accuracy is', str('{:04.2f}'.format(accuracy * 100)) + '%')\n","print('------------------------------------------------')\n","print('Confusion Matrix:')\n","print(pd.DataFrame(confusion_matrix(y_test, predicted)))\n","print('------------------------------------------------')\n","print('Classification Report:')\n","print(classification_report(y_test, predicted, target_names=['normal', 'fraud', 'promo']))\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T10:42:13.824688Z","iopub.execute_input":"2024-05-23T10:42:13.825069Z","iopub.status.idle":"2024-05-23T10:42:57.633631Z","shell.execute_reply.started":"2024-05-23T10:42:13.825041Z","shell.execute_reply":"2024-05-23T10:42:57.632638Z"},"trusted":true,"id":"-JHmBkemNa85","outputId":"3a6d935d-fff3-4e44-b0b8-44ae814690a9"},"execution_count":null,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\nComplementNB model accuracy is 69.87%\n------------------------------------------------\nConfusion Matrix:\n    0   1   2\n0  97  11   1\n1  11  51   1\n2   8  37  12\n------------------------------------------------\nClassification Report:\n              precision    recall  f1-score   support\n\n      normal       0.84      0.89      0.86       109\n       fraud       0.52      0.81      0.63        63\n       promo       0.86      0.21      0.34        57\n\n    accuracy                           0.70       229\n   macro avg       0.74      0.64      0.61       229\nweighted avg       0.75      0.70      0.67       229\n\n","output_type":"stream"}]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","plt.bar(['Accuracy'], [accuracy], color=['lightgreen'])\n","plt.title('ComplementNB Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.ylim(0, 1)\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T10:46:33.117004Z","iopub.execute_input":"2024-05-23T10:46:33.11739Z","iopub.status.idle":"2024-05-23T10:46:33.343907Z","shell.execute_reply.started":"2024-05-23T10:46:33.117354Z","shell.execute_reply":"2024-05-23T10:46:33.342937Z"},"trusted":true,"id":"udcDbDVPNa86","outputId":"93289ad4-9495-4cdc-b8b2-e0f2b36c1999"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":["# LSTM"],"metadata":{"id":"WadxvuQ3Na86"}},{"cell_type":"code","source":["batch_size = 256\n","epochs = 32\n","embed_size = 100"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:05:41.721508Z","iopub.execute_input":"2024-05-23T09:05:41.72249Z","iopub.status.idle":"2024-05-23T09:05:41.726922Z","shell.execute_reply.started":"2024-05-23T09:05:41.722439Z","shell.execute_reply":"2024-05-23T09:05:41.725612Z"},"trusted":true,"id":"agBqC25VNa86"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.00001)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:05:44.198032Z","iopub.execute_input":"2024-05-23T09:05:44.198906Z","iopub.status.idle":"2024-05-23T09:05:44.203443Z","shell.execute_reply.started":"2024-05-23T09:05:44.19887Z","shell.execute_reply":"2024-05-23T09:05:44.202373Z"},"trusted":true,"id":"SS9tk8A0Na86"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# from tensorflow.keras.models import Sequential\n","# from tensorflow.keras.layers import Dense, LSTM, Embedding\n","# from sklearn.model_selection import train_test_split\n","# from tensorflow.keras.preprocessing import text, sequence\n","# import numpy as np\n","\n","# Assuming embedding_matrix and embed_size are already defined correctly\n","# Initialize the model\n","model = Sequential()\n","\n","# Non-trainable embeddidng layer\n","model.add(Embedding(input_dim=max_features, output_dim=embed_size, weights=[embedding_matrix], input_length=maxlen, trainable=False))\n","\n","# LSTM layers\n","model.add(LSTM(units=128, return_sequences=True, recurrent_dropout=0.25, dropout=0.25))\n","model.add(LSTM(units=64, recurrent_dropout=0.1, dropout=0.1))\n","\n","# Dense layers\n","model.add(Dense(units=32, activation='relu'))\n","model.add(Dense(units=3, activation='softmax'))  # Change units to 3 for multi-class classification\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","# Print the model summary\n","model.summary()\n","\n","# # Fit the model\n","# history = model.fit(x_train, y_train, epochs=10, batch_size=64, validation_data=(x_test, y_test))\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:24:22.324862Z","iopub.execute_input":"2024-05-23T09:24:22.325746Z","iopub.status.idle":"2024-05-23T09:24:22.643186Z","shell.execute_reply.started":"2024-05-23T09:24:22.325711Z","shell.execute_reply":"2024-05-23T09:24:22.641855Z"},"trusted":true,"id":"21nu5lhQNa86","outputId":"6fd5f987-81d4-44de-c19e-0d6f6536896d"},"execution_count":null,"outputs":[{"name":"stdout","text":"Model: \"sequential_18\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n embedding_18 (Embedding)    (None, 300, 100)          372300    \n                                                                 \n lstm_18 (LSTM)              (None, 300, 128)          117248    \n                                                                 \n lstm_19 (LSTM)              (None, 64)                49408     \n                                                                 \n dense_17 (Dense)            (None, 32)                2080      \n                                                                 \n dense_18 (Dense)            (None, 3)                 99        \n                                                                 \n=================================================================\nTotal params: 541,135\nTrainable params: 168,835\nNon-trainable params: 372,300\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":["history = model.fit(x_train, y_train, batch_size = batch_size , validation_data = (x_test,y_test) , epochs = epochs , callbacks = [learning_rate_reduction])"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:24:44.135562Z","iopub.execute_input":"2024-05-23T09:24:44.135987Z","iopub.status.idle":"2024-05-23T09:29:06.375432Z","shell.execute_reply.started":"2024-05-23T09:24:44.135953Z","shell.execute_reply":"2024-05-23T09:29:06.374489Z"},"trusted":true,"id":"dIohIrlRNa86","outputId":"d861203d-361e-4050-d476-a6938c65d46c"},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/32\n4/4 [==============================] - 16s 2s/step - loss: 0.9956 - accuracy: 0.4982 - val_loss: 0.8053 - val_accuracy: 0.5559 - lr: 0.0010\nEpoch 2/32\n4/4 [==============================] - 8s 2s/step - loss: 0.7925 - accuracy: 0.6243 - val_loss: 0.6284 - val_accuracy: 0.7098 - lr: 0.0010\nEpoch 3/32\n4/4 [==============================] - 8s 2s/step - loss: 0.6647 - accuracy: 0.6791 - val_loss: 0.6694 - val_accuracy: 0.7238 - lr: 0.0010\nEpoch 4/32\n4/4 [==============================] - 8s 2s/step - loss: 0.5913 - accuracy: 0.7328 - val_loss: 0.4693 - val_accuracy: 0.8147 - lr: 0.0010\nEpoch 5/32\n4/4 [==============================] - 8s 2s/step - loss: 0.5192 - accuracy: 0.7655 - val_loss: 0.5047 - val_accuracy: 0.8182 - lr: 0.0010\nEpoch 6/32\n4/4 [==============================] - 8s 2s/step - loss: 0.4531 - accuracy: 0.8180 - val_loss: 0.3911 - val_accuracy: 0.8636 - lr: 0.0010\nEpoch 7/32\n4/4 [==============================] - 8s 2s/step - loss: 0.3862 - accuracy: 0.8623 - val_loss: 0.4378 - val_accuracy: 0.8357 - lr: 0.0010\nEpoch 8/32\n4/4 [==============================] - ETA: 0s - loss: 0.3336 - accuracy: 0.8880\nEpoch 8: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n4/4 [==============================] - 8s 2s/step - loss: 0.3336 - accuracy: 0.8880 - val_loss: 0.3628 - val_accuracy: 0.8636 - lr: 0.0010\nEpoch 9/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2873 - accuracy: 0.9008 - val_loss: 0.3791 - val_accuracy: 0.8636 - lr: 5.0000e-04\nEpoch 10/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2939 - accuracy: 0.8891 - val_loss: 0.3253 - val_accuracy: 0.8776 - lr: 5.0000e-04\nEpoch 11/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2515 - accuracy: 0.9148 - val_loss: 0.3232 - val_accuracy: 0.8776 - lr: 5.0000e-04\nEpoch 12/32\n4/4 [==============================] - ETA: 0s - loss: 0.2382 - accuracy: 0.9137\nEpoch 12: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n4/4 [==============================] - 8s 2s/step - loss: 0.2382 - accuracy: 0.9137 - val_loss: 0.3428 - val_accuracy: 0.8601 - lr: 5.0000e-04\nEpoch 13/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2221 - accuracy: 0.9195 - val_loss: 0.3462 - val_accuracy: 0.8636 - lr: 2.5000e-04\nEpoch 14/32\n4/4 [==============================] - ETA: 0s - loss: 0.2201 - accuracy: 0.9160\nEpoch 14: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n4/4 [==============================] - 8s 2s/step - loss: 0.2201 - accuracy: 0.9160 - val_loss: 0.3204 - val_accuracy: 0.8776 - lr: 2.5000e-04\nEpoch 15/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2176 - accuracy: 0.9265 - val_loss: 0.3202 - val_accuracy: 0.8846 - lr: 1.2500e-04\nEpoch 16/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2007 - accuracy: 0.9277 - val_loss: 0.3389 - val_accuracy: 0.8741 - lr: 1.2500e-04\nEpoch 17/32\n4/4 [==============================] - ETA: 0s - loss: 0.2047 - accuracy: 0.9358\nEpoch 17: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n4/4 [==============================] - 8s 2s/step - loss: 0.2047 - accuracy: 0.9358 - val_loss: 0.3504 - val_accuracy: 0.8741 - lr: 1.2500e-04\nEpoch 18/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1973 - accuracy: 0.9218 - val_loss: 0.3417 - val_accuracy: 0.8776 - lr: 6.2500e-05\nEpoch 19/32\n4/4 [==============================] - ETA: 0s - loss: 0.1969 - accuracy: 0.9312\nEpoch 19: ReduceLROnPlateau reducing learning rate to 3.125000148429535e-05.\n4/4 [==============================] - 8s 2s/step - loss: 0.1969 - accuracy: 0.9312 - val_loss: 0.3311 - val_accuracy: 0.8811 - lr: 6.2500e-05\nEpoch 20/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1977 - accuracy: 0.9370 - val_loss: 0.3280 - val_accuracy: 0.8811 - lr: 3.1250e-05\nEpoch 21/32\n4/4 [==============================] - ETA: 0s - loss: 0.2023 - accuracy: 0.9335\nEpoch 21: ReduceLROnPlateau reducing learning rate to 1.5625000742147677e-05.\n4/4 [==============================] - 8s 2s/step - loss: 0.2023 - accuracy: 0.9335 - val_loss: 0.3301 - val_accuracy: 0.8846 - lr: 3.1250e-05\nEpoch 22/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1930 - accuracy: 0.9393 - val_loss: 0.3320 - val_accuracy: 0.8846 - lr: 1.5625e-05\nEpoch 23/32\n4/4 [==============================] - ETA: 0s - loss: 0.2021 - accuracy: 0.9230\nEpoch 23: ReduceLROnPlateau reducing learning rate to 1e-05.\n4/4 [==============================] - 8s 2s/step - loss: 0.2021 - accuracy: 0.9230 - val_loss: 0.3335 - val_accuracy: 0.8811 - lr: 1.5625e-05\nEpoch 24/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2034 - accuracy: 0.9370 - val_loss: 0.3344 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 25/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1894 - accuracy: 0.9405 - val_loss: 0.3348 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 26/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2010 - accuracy: 0.9312 - val_loss: 0.3349 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 27/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1782 - accuracy: 0.9417 - val_loss: 0.3350 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 28/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1975 - accuracy: 0.9312 - val_loss: 0.3355 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 29/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2070 - accuracy: 0.9277 - val_loss: 0.3360 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 30/32\n4/4 [==============================] - 8s 2s/step - loss: 0.1758 - accuracy: 0.9452 - val_loss: 0.3359 - val_accuracy: 0.8811 - lr: 1.0000e-05\nEpoch 31/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2037 - accuracy: 0.9312 - val_loss: 0.3361 - val_accuracy: 0.8776 - lr: 1.0000e-05\nEpoch 32/32\n4/4 [==============================] - 8s 2s/step - loss: 0.2044 - accuracy: 0.9288 - val_loss: 0.3368 - val_accuracy: 0.8741 - lr: 1.0000e-05\n","output_type":"stream"}]},{"cell_type":"markdown","source":["# ANALYSIS AFTER TRAINING OF MODEL - LSTM"],"metadata":{"id":"CD744AyhNa86"}},{"cell_type":"code","source":["print(\"Accuracy of the model on Training Data is - \" , model.evaluate(x_train,y_train)[1]*100 , \"%\")\n","print(\"Accuracy of the model on Testing Data is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:29:39.686657Z","iopub.execute_input":"2024-05-23T09:29:39.686959Z","iopub.status.idle":"2024-05-23T09:29:44.760298Z","shell.execute_reply.started":"2024-05-23T09:29:39.686932Z","shell.execute_reply":"2024-05-23T09:29:44.759327Z"},"trusted":true,"id":"Lk3u9FG9Na87","outputId":"e404baac-daa9-4541-8253-8d91db477a6a"},"execution_count":null,"outputs":[{"name":"stdout","text":"27/27 [==============================] - 4s 137ms/step - loss: 0.1618 - accuracy: 0.9487\nAccuracy of the model on Training Data is -  94.86581087112427 %\n9/9 [==============================] - 1s 135ms/step - loss: 0.3368 - accuracy: 0.8741\nAccuracy of the model on Testing Data is -  87.41258978843689 %\n","output_type":"stream"}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import classification_report, accuracy_score\n","\n","def evaluate_model_with_report(model, X_test, y_test):\n","    # Predict class labels for test data\n","    y_pred = model.predict(X_test)\n","\n","    # Convert y_test to labels if it's in multi-output format\n","    if y_test.ndim > 1:\n","        y_test = np.argmax(y_test, axis=1)\n","\n","    # Convert y_pred to labels if it's in multi-output format\n","    if y_pred.ndim > 1:\n","        y_pred = np.argmax(y_pred, axis=1)\n","\n","    # Print classification report\n","    print(classification_report(y_test, y_pred, target_names=['normal', 'fraud', 'promo']))\n","\n","    # Calculate and print the accuracy\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n","\n","# Assuming you have trained your model `model` already\n","# Example evaluation on training and testing data\n","# Replace `x_train`, `y_train`, `x_test`, and `y_test` with your actual data\n","# Evaluate the model on training data\n","print(\"Training Data:\")\n","evaluate_model_with_report(model, x_train, y_train)\n","\n","# Evaluate the model on testing data\n","print(\"\\nTesting Data:\")\n","evaluate_model_with_report(model, x_test, y_test)\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-23T09:53:22.735639Z","iopub.execute_input":"2024-05-23T09:53:22.73666Z","iopub.status.idle":"2024-05-23T09:53:27.872848Z","shell.execute_reply.started":"2024-05-23T09:53:22.736621Z","shell.execute_reply":"2024-05-23T09:53:27.871829Z"},"trusted":true,"id":"ERXOAxtsNa87","outputId":"a0daf4dd-95d4-4c44-aa67-4a2215ff16b3"},"execution_count":null,"outputs":[{"name":"stdout","text":"Training Data:\n27/27 [==============================] - 4s 139ms/step\n              precision    recall  f1-score   support\n\n      normal       0.97      0.97      0.97       413\n       fraud       0.95      0.92      0.93       253\n       promo       0.90      0.93      0.92       191\n\n    accuracy                           0.95       857\n   macro avg       0.94      0.94      0.94       857\nweighted avg       0.95      0.95      0.95       857\n\nAccuracy: 94.87%\n\nTesting Data:\n9/9 [==============================] - 1s 137ms/step\n              precision    recall  f1-score   support\n\n      normal       0.91      0.96      0.93       156\n       fraud       0.91      0.76      0.83        82\n       promo       0.71      0.81      0.76        48\n\n    accuracy                           0.87       286\n   macro avg       0.84      0.84      0.84       286\nweighted avg       0.88      0.87      0.87       286\n\nAccuracy: 87.41%\n","output_type":"stream"}]}]}